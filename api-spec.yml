openapi: 3.0.0
info:
  description: API definition for Helio
  version: 1.0.0
  title: Helio API
paths:
  /motor/{motor_id}:
    get:
      tags:
      - motor
      summary: Get motor state
      operationId: motor.get
      parameters:
        - name: motor_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/id'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Motor'
        '400':
          $ref: '#/components/responses/400InvalidInput'
        '500':
          $ref: '#/components/responses/500InternalError'
  /motor/get_all:
    get:
      tags:
      - motor
      summary: Get all motor information
      operationId: motor.get_all
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Motor'
        '400':
          $ref: '#/components/responses/400InvalidInput'
        '500':
          $ref: '#/components/responses/500InternalError'
  /motor/unregister/{motor_id}:
    delete:
      tags:
        - "motor"
      summary: "Delete motor"
      operationId: "motor.unregister"
      parameters:
        - name: motor_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/id'
      responses:
        200:
          description: "Ok"
        400:
          $ref: '#/components/responses/400InvalidInput'
        500:
          $ref: '#/components/responses/500InternalError'
  /motor/register:
    post:
      tags:
      - motor
      summary: Add a new motor to system
      operationId: motor.register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MotorNoId'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Motor"
        400:
          $ref: '#/components/responses/400InvalidInput'
        500:
          $ref: '#/components/responses/500InternalError'
  /motor/move:
    patch:
      tags:
      - motor
      summary: Move the blinds to a specified level
      operationId: motor.move
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - level
              properties:
                id:
                  $ref: '#/components/schemas/id'
                level:
                  $ref: '#/components/schemas/level'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Motor"
        400:
          $ref: '#/components/responses/400InvalidInput'
        500:
          $ref: '#/components/responses/500InternalError'
  /motor/rename:
    patch:
      tags:
      - motor
      summary: Rename a motor
      operationId: motor.rename
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - name
              properties:
                id:
                  $ref: '#/components/schemas/id'
                name:
                  type: string
                  example: bedroom-1
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Motor"
        400:
          $ref: '#/components/responses/400InvalidInput'
        500:
          $ref: '#/components/responses/500InternalError'
  /motor/activate/{motor_id}:
    patch:
      tags:
      - "motor"
      summary: "Activate a motor"
      operationId: "motor.activate"
      parameters:
        - name: motor_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/id'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Motor"
        400:
          $ref: '#/components/responses/400InvalidInput'
        500:
          $ref: '#/components/responses/500InternalError'
  /motor/deactivate/{motor_id}:
    patch:
      tags:
      - "motor"
      summary: "Deactivate a motor"
      operationId: "motor.deactivate"
      parameters:
        - name: motor_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/id'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Motor"
        400:
          $ref: '#/components/responses/400InvalidInput'
        500:
          $ref: '#/components/responses/500InternalError'
  /motor/start_calibrate/{motor_id}:
    # the user has manually moved the blinds to the top
    # this request triggers the blinds to drop down and waits for user
    # to send stop_calibrate request
    patch:
      tags:
      - "motor"
      summary: "Start calibration process"
      operationId: "motor.start_calibration"
      parameters:
        - name: motor_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/id'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Motor"
        400:
          $ref: '#/components/responses/400InvalidInput'
        500:
          $ref: '#/components/responses/500InternalError'
  /motor/stop_calibrate/{motor_id}:
    # this request tells motor to stop dropping blinds and
    # completes the calibration process. The motor will record
    # the length of the blinds (the number of motor rotations) from this
    patch:
      tags:
      - "motor"
      summary: "Stop calibration process"
      operationId: "motor.stop_calibration"
      parameters:
        - name: motor_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/id'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Motor"
        400:
          $ref: '#/components/responses/400InvalidInput'
        500:
          $ref: '#/components/responses/500InternalError'

# Motion Sensor
#   /motion/{motion_sensor_id}:
#     get:
#       tags:
#       - motion
#       summary: Get motion sensor state
#       operationId: getMotionSensor
#       parameters:
#         - name: motion_sensor_id
#           in: path
#           required: true
#           schema:
#             $ref: '#/components/schemas/id'
#       responses:
#         200:
#           description: OK
#           content:
#             application/json:
#               schema:
#                 $ref: "#/components/schemas/Motion"
#         400:
#           $ref: '#/components/responses/400InvalidInput'
#         500:
#           $ref: '#/components/responses/500InternalError'
#   # /motion/get_all:
#   #   get:
#   #     tags:
#   #     - motion
#   #     summary: Get all motion sensor information
#   #     operationId: getAllMotions
#   #     responses:
#   #       '200':
#   #         description: "OK"
#   #         content:
#   #           application/json:
#   #             schema:
#   #               type: array
#   #               items:
#   #                 $ref: '#/components/schemas/Motion'
#   #       '400':
#   #         $ref: '#/components/responses/400InvalidInput'
#   #       '500':
#   #         $ref: '#/components/responses/500InternalError'
#   # /motion/unregister/{motion_sensor_id}:
#     delete:
#       tags:
#         - "motion"
#       summary: "Delete motion sensor"
#       operationId: "deleteMotion"
#       parameters:
#         - name: motion_sensor_id
#           in: path
#           required: true
#           schema:
#             $ref: '#/components/schemas/id'
#       responses:
#         200:
#           description: "Ok"
#         400:
#           $ref: '#/components/responses/400InvalidInput'
#         500:
#           $ref: '#/components/responses/500InternalError'
#   /motion/activate:
#     patch:
#       tags:
#       - "motion"
#       summary: "Activate a motion sensor"
#       operationId: "activateMotion"
#       requestBody:
#         content:
#           application/json:
#             schema:
#               $ref: '#/components/schemas/id'
#       responses:
#         200:
#           description: OK
#           content:
#             application/json:
#               schema:
#                 $ref: "#/components/schemas/Motion"
#         400:
#           $ref: '#/components/responses/400InvalidInput'
#         500:
#           $ref: '#/components/responses/500InternalError'
#   /motion/deactivate:
#     patch:
#       tags:
#       - "motion"
#       summary: "Deactivate a motion sensor"
#       operationId: "deactivateMotion"
#       requestBody:
#         content:
#           application/json:
#             schema:
#               $ref: '#/components/schemas/id'
#       responses:
#         200:
#           description: OK
#           content:
#             application/json:
#               schema:
#                 $ref: "#/components/schemas/Motion"
#         400:
#           $ref: '#/components/responses/400InvalidInput'
#         500:
#           $ref: '#/components/responses/500InternalError'
#   /motion/rename:
#     patch:
#       tags:
#       - "motion"
#       summary: "Rename a motion sensor"
#       operationId: "renameMotion"
#       requestBody:
#         content:
#           application/json:
#             schema:
#               type: object
#               required:
#                 - id
#                 - name
#               properties:
#                 id:
#                   $ref: '#/components/schemas/id'
#                 name:
#                   type: "string"
#                   example: "hallway-1"
#       responses:
#         200:
#           description: OK
#           content:
#             application/json:
#               schema:
#                 $ref: "#/components/schemas/Motion"
#         400:
#           $ref: '#/components/responses/400InvalidInput'
#         500:
#           $ref: '#/components/responses/500InternalError'
#   /motion/change_motors:
#     patch:
#       tags:
#       - "motion"
#       summary: "Change the motors the sensor controls"
#       operationId: "changeMotorsMotion"
#       requestBody:
#         content:
#           application/json:
#             schema:
#               type: object
#               required:
#                 - id
#                 - motor-ids
#               properties:
#                 id:
#                   $ref: '#/components/schemas/id'
#                 motor-ids:
#                   type: array
#                   items:
#                     type: integer
#       responses:
#         200:
#           description: OK
#           content:
#             application/json:
#               schema:
#                 $ref: "#/components/schemas/Motion"
#         400:
#           $ref: '#/components/responses/400InvalidInput'
#         500:
#           $ref: '#/components/responses/500InternalError'
#   /motion/duration_sensitivity:
#     patch:
#       tags:
#       - "motion"
#       summary: "Update duration sensitivity"
#       operationId: "durationSensitivity"
#       requestBody:
#         content:
#           application/json:
#             schema:
#               type: object
#               required:
#                 - id
#                 - durationSensitivity
#               properties:
#                 id:
#                   $ref: '#/components/schemas/id'
#                 durationSensitivity:
#                   type: "string"
#                   # pattern: hh:mm
#       responses:
#         200:
#           description: OK
#           content:
#             application/json:
#               schema:
#                 $ref: "#/components/schemas/Motion"
#         400:
#           $ref: '#/components/responses/400InvalidInput'
#         500:
#           $ref: '#/components/responses/500InternalError'
#   /motion/register:
#     post:
#       tags:
#       - "motion"
#       summary: "Add a new motion sensor to system"
#       operationId: "addMotion"
#       requestBody:
#         content:
#           application/json:
#             schema:
#               $ref: '#/components/schemas/MotionNoId'

#       responses:
#         201:
#           description: Registered new motion sensor
#           content:
#             application/json:
#               schema:
#                 $ref: "#/components/schemas/Motion"
#         400:
#           $ref: '#/components/responses/400InvalidInput'
#         500:
#           $ref: '#/components/responses/500InternalError'

# # Light sensor
#   /light/{light_sensor_id}:
#     get:
#       tags:
#       - "light"
#       summary: "Get light sensor state"
#       operationId: "getLightSensor"
#       parameters:
#         - name: light_sensor_id
#           in: path
#           required: true
#           schema:
#             $ref: '#/components/schemas/id'
#       responses:
#         200:
#           description: OK
#           content:
#             application/json:
#               schema:
#                 $ref: "#/components/schemas/Light"
#         400:
#           $ref: '#/components/responses/400InvalidInput'
#         500:
#           $ref: '#/components/responses/500InternalError'
#   /light/get_all:
#     get:
#       tags:
#       - light
#       summary: Get all light sensor information
#       operationId: getAllLights
#       responses:
#         '200':
#           description: "OK"
#           content:
#             application/json:
#               schema:
#                 type: array
#                 items:
#                   $ref: '#/components/schemas/Light'
#         '400':
#           $ref: '#/components/responses/400InvalidInput'
#         '500':
#           $ref: '#/components/responses/500InternalError'
#   /light/unregister/{light_sensor_id}:
#     delete:
#       tags:
#         - "light"
#       summary: "Delete light sensor"
#       operationId: "deleteLight"
#       parameters:
#         - name: light_sensor_id
#           in: path
#           required: true
#           schema:
#             $ref: '#/components/schemas/id'
#       responses:
#         200:
#           description: "Ok"
#         400:
#           $ref: '#/components/responses/400InvalidInput'
#         500:
#           $ref: '#/components/responses/500InternalError'
#   /light/activate:
#     patch:
#       tags:
#       - "light"
#       summary: "Activate a light sensor"
#       operationId: "activateLight"
#       requestBody:
#         content:
#           application/json:
#             schema:
#               $ref: '#/components/schemas/id'
#       responses:
#         200:
#           description: OK
#           content:
#             application/json:
#               schema:
#                 $ref: "#/components/schemas/Light"
#         400:
#           $ref: '#/components/responses/400InvalidInput'
#         500:
#           $ref: '#/components/responses/500InternalError'
#   /light/deactivate:
#     patch:
#       tags:
#       - "light"
#       summary: "Deactivate a light sensor"
#       operationId: "deactivateLight"
#       requestBody:
#         content:
#           application/json:
#             schema:
#               $ref: '#/components/schemas/id'
#       responses:
#         200:
#           description: OK
#           content:
#             application/json:
#               schema:
#                 $ref: "#/components/schemas/Light"
#         400:
#           $ref: '#/components/responses/400InvalidInput'
#         500:
#           $ref: '#/components/responses/500InternalError'
#   /light/rename:
#     patch:
#       tags:
#       - "light"
#       summary: "Rename a light sensor"
#       operationId: "renameLight"
#       requestBody:
#         content:
#           application/json:
#             schema:
#               type: "object"
#               required:
#                 - id
#                 - name
#               properties:
#                 id:
#                   $ref: '#/components/schemas/id'
#                 name:
#                   type: "string"
#                   example: "hallway-1"
#       responses:
#         200:
#           description: OK
#           content:
#             application/json:
#               schema:
#                 $ref: "#/components/schemas/Light"
#         400:
#           $ref: '#/components/responses/400InvalidInput'
#         500:
#           $ref: '#/components/responses/500InternalError'
#   /light/change_motors:
#     patch:
#       tags:
#       - "light"
#       summary: "Change the motors a sensor controls"
#       operationId: "changeMotorsLight"
#       requestBody:
#         content:
#           application/json:
#             schema:
#               type: "object"
#               required:
#                 - id
#                 - motor-ids
#               properties:
#                 id:
#                   $ref: '#/components/schemas/id'
#                 motor-ids:
#                   type: array
#                   items:
#                     type: integer
#       responses:
#         200:
#           description: OK
#           content:
#             application/json:
#               schema:
#                 $ref: "#/components/schemas/Light"
#         400:
#           $ref: '#/components/responses/400InvalidInput'
#         500:
#           $ref: '#/components/responses/500InternalError'
#   /light/register:
#     post:
#       tags:
#       - "light"
#       summary: "Add a new light sensor to system"
#       operationId: "addLight"
#       requestBody:
#         content:
#           application/json:
#             schema:
#               $ref: '#/components/schemas/LightNoId'
#       responses:
#         200:
#           description: OK
#           content:
#             application/json:
#               schema:
#                 $ref: "#/components/schemas/Light"
#         400:
#           $ref: '#/components/responses/400InvalidInput'
#         500:
#           $ref: '#/components/responses/500InternalError'  /motor/{motor_id}:
  /schedule/get/{schedule_id}:
    get:
      tags:
      - schedule
      summary: Get schedule state
      operationId: shedule.get
      parameters:
        - name: schedule_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/id'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        '400':
          $ref: '#/components/responses/400InvalidInput'
        '500':
          $ref: '#/components/responses/500InternalError'
  /schedule/get_all:
    get:
      tags:
      - schedule
      summary: Get all schedule information
      operationId: shedule.get_all
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schedule'
        '400':
          $ref: '#/components/responses/400InvalidInput'
        '500':
          $ref: '#/components/responses/500InternalError'
  /schedule/register:
    post:
      tags:
      - "schedule"
      summary: "Add a new schedule"
      operationId: shedule.register
      requestBody:
        content:
          application/json:
            schema:
                $ref: "#/components/schemas/ScheduleNoId"
      responses:
        200:
          description: "Ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Schedule"
        400:
          $ref: '#/components/responses/400InvalidInput'
        500:
          $ref: '#/components/responses/500InternalError'
  /schedule/unregister/{schedule_id}:
    delete:
      tags:
        - "schedule"
      summary: "Delete schedule"
      operationId: shedule.unregister
      parameters:
        - name: schedule_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/id'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Schedule"
        400:
          $ref: '#/components/responses/400InvalidInput'
        500:
          $ref: '#/components/responses/500InternalError'
  /schedule/change_days:
    patch:
      tags:
        - schedule
      summary: Change days
      operationId: shedule.change_days
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - days
              properties:
                id:
                  $ref: '#/components/schemas/id'
                days: 
                  $ref: '#/components/schemas/days'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Schedule"
        400:
          $ref: '#/components/responses/400InvalidInput'
        500:
          $ref: '#/components/responses/500InternalError'
  /schedule/change_time:
    patch:
      tags:
        - "schedule"
      summary: "Change time"
      operationId: shedule.change_time
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              required:
                - id
                - time
              properties:
                id:
                  $ref: '#/components/schemas/id'
                time:
                  $ref: '#/components/schemas/time'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Schedule"
        400:
          $ref: '#/components/responses/400InvalidInput'
        500:
          $ref: '#/components/responses/500InternalError'
  /schedule/change_gradient:
    patch:
      tags:
        - "schedule"
      summary: "Change gradient"
      operationId: shedule.change_gradient
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              required:
                - id
                - gradient
              properties:
                id:
                  $ref: '#/components/schemas/id'
                gradient:
                  $ref: '#/components/schemas/gradient'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Schedule"
        400:
          $ref: '#/components/responses/400InvalidInput'
        500:
          $ref: '#/components/responses/500InternalError'
  /schedule/rename:
    patch:
      tags:
        - "schedule"
      summary: "rename schedule"
      operationId: shedule.rename
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              required:
                - id
                - name
              properties:
                id:
                  $ref: '#/components/schemas/id'
                name:
                  type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Schedule"
        400:
          $ref: '#/components/responses/400InvalidInput'
        500:
          $ref: '#/components/responses/500InternalError'
  /schedule/activate/{schedule_id}:
    patch:
      tags:
        - "schedule"
      summary: "Activate schedule"
      operationId: shedule.activate
      parameters:
        - name: schedule_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/id'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Schedule"
        400:
          $ref: '#/components/responses/400InvalidInput'
        500:
          $ref: '#/components/responses/500InternalError'
  /schedule/deactivate/{schedule_id}:
    patch:
      tags:
        - "schedule"
      summary: "Deactivate schedule"
      operationId: shedule.deactivate
      parameters:
        - name: schedule_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/id'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Schedule"
        400:
          $ref: '#/components/responses/400InvalidInput'
        500:
          $ref: '#/components/responses/500InternalError'


components:
  schemas:
    Motor:
      type: object
      required:
        - id
        - name
        - ip
        - active
        - level
        - battery
        - length
        - style
      properties:
        id:
          $ref: '#/components/schemas/id'
        name:
          type: string
          example: bedroom-1
        ip:
          $ref: '#/components/schemas/ip'
        active:
          type: boolean
        level:
          $ref: '#/components/schemas/level'
        battery:
          type: integer
          minimum: 0
          maximum: 100
        length:
          type: integer
        style:
          # For storing customised style info like icon or colour.
          # Hub just needs to store it, app will figure out formatting and stuff.
          type: string
    MotorNoId:
      type: object
      required:
        - name
        - ip
        - active
        - level
        - battery
        - length
        - style
      properties:
        name:
          type: string
          example: bedroom-1
        ip:
          $ref: '#/components/schemas/ip'
        active:
          type: boolean
        level:
          $ref: '#/components/schemas/level'
        battery:
          type: integer
          minimum: 0
          maximum: 100
        length:
          type: integer
        style:
          # For storing customised style info like icon or colour.
          # Hub just needs to store it, app will figure out formatting and stuff.
          type: string
    Motion:
      type: "object"
      required:
        - id
        - name
        - ip
        - active
        - battery
        - durationSensitivity
        - motor-ids
        - style
      properties:
        id:
          $ref: '#/components/schemas/id'
        name:
          type: "string"
          example: "hallway"
        ip:
          $ref: '#/components/schemas/ip'
        active:
          type: "boolean"
        battery:
          type: "integer"
          minimum: 0
          maximum: 100
        durationSensitivity:
          type: "string" # pattern hh:mm
        motor-ids:
          type: array
          items:
            type: integer
        style:
          # For storing customised style info like icon or colour.
          # Hub just needs to store it, app will figure out formatting and stuff.
          type: string
    Light:
      type: "object"
      required:
        - id
        - name
        - ip
        - active
        - battery
        - motor-ids
        - style
      properties:
        id:
          $ref: '#/components/schemas/id'
        name:
          type: "string"
          example: "hallway"
        ip:
          $ref: '#/components/schemas/ip'
        active:
          type: "boolean"
        battery:
          type: "integer"
          minimum: 0
          maximum: 100
        motor-ids:
          type: array
          items:
            type: integer
        style:
          # For storing customised style info like icon or colour.
          # Hub just needs to store it, app will figure out formatting and stuff.
          type: string
    Schedule:
      type: "object"
      required:
        - id
        - name
        - active
        - days
        - target-level
        - gradient
        - motor-ids
        - time
      properties:
        id:
          $ref: '#/components/schemas/id'
        name:
          type: "string"
          example: "weekday mornings"
        active:
          type: "boolean"
        days: 
          $ref: "#/components/schemas/days"
        target-level:
          $ref: '#/components/schemas/level'
        gradient:
          $ref: '#/components/schemas/gradient'
        motor-ids:
          type: array
          items:
            type: integer
        time:
          $ref: "#/components/schemas/time"
    id:
      type: "integer"
      minimum: 0
    ip:
      type: string
      format: ipv4
    level:
      type: integer
      minimum: 0
      maximum: 100
    time:
      type: string # pattern hh:mm
    gradient:
      type: integer # number of minutes before that it starts moving
      minimum: 0
    days:
      type: "array"
      items:
        type: string
        enum:
          - Monday
          - Tuesday
          - Wednesday
          - Thursday
          - Friday
          - Saturday
          - Sunday
    MotionNoId:
      type: "object"
      required:
        - name
        - ip
        - active
        - battery
        - durationSensitivity
        - motor-ids
        - style
      properties:
        name:
          type: "string"
          example: "hallway"
        ip:
          $ref: '#/components/schemas/ip'
        active:
          type: "boolean"
        battery:
          type: "integer"
          minimum: 0
          maximum: 100
        durationSensitivity:
          type: "string" # pattern hh:mm
        motor-ids:
          type: array
          items:
            type: integer
        style:
          # For storing customised style info like icon or colour.
          # Hub just needs to store it, app will figure out formatting and stuff.
          type: string
    LightNoId:
      type: "object"
      required:
        - name
        - ip
        - active
        - battery
        - motor-ids
        - style
      properties:
        name:
          type: "string"
          example: "hallway"
        ip:
          $ref: '#/components/schemas/ip'
        active:
          type: "boolean"
        battery:
          type: "integer"
          minimum: 0
          maximum: 100
        motor-ids:
          type: array
          items:
            type: integer
        style:
          # For storing customised style info like icon or colour.
          # Hub just needs to store it, app will figure out formatting and stuff.
          type: string
    ScheduleNoId:
      type: "object"
      required:
        - name
        - active
        - days
        - target-level
        - gradient
        - motor-ids
        - time
      properties:
        name:
          type: "string"
          example: "weekday mornings"
        active:
          type: "boolean"
        days: 
          $ref: "#/components/schemas/days"
        target-level:
          $ref: '#/components/schemas/level'
        gradient:
          $ref: '#/components/schemas/gradient'
        motor-ids:
          type: array
          items:
            type: integer
        time:
          $ref: "#/components/schemas/time"
  responses:
    200OK:
      description: Operation completed successfully
    201CreatedObject:
      description: Created object successfully
    400InvalidInput:
      description: Invalid input, ensure object id was specified correctly
    500InternalError:
      description: Internal server error, failed to complete operation

externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
