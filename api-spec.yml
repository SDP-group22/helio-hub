openapi: 3.0.0
info:
  description: API definition for Helio
  version: 1.0.0
  title: Helio API
paths:
  #Motor
  # For testing only
  /motor/test/move/{motor_id}:
    post:
      tags:
        - motor
      summary: Move motor
      operationId: motor.test_motor_movement
      parameters:
        - name: motor_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MotorNoId'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Motor"
        400:
          $ref: '#/components/responses/400InvalidInput'
        500:
          $ref: '#/components/responses/500InternalError'
  /motor/{motor_id}:
    get:
      tags:
      - motor
      summary: Get motor state
      operationId: motor.get
      parameters:
        - name: motor_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/id'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Motor'
        '400':
          $ref: '#/components/responses/400InvalidInput'
        '500':
          $ref: '#/components/responses/500InternalError'
  /motor/get_all:
    get:
      tags:
      - motor
      summary: Get all motor information
      operationId: motor.get_all
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Motor'
        '400':
          $ref: '#/components/responses/400InvalidInput'
        '500':
          $ref: '#/components/responses/500InternalError'
  /motor/unregister/{motor_id}:
    delete:
      tags:
        - "motor"
      summary: "Delete motor"
      operationId: "motor.unregister"
      parameters:
        - name: motor_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/id'
      responses:
        200:
          description: "Ok"
        400:
          $ref: '#/components/responses/400InvalidInput'
        500:
          $ref: '#/components/responses/500InternalError'
  /motor/register:
    post:
      tags:
      - motor
      summary: Add a new motor to system
      operationId: motor.register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MotorNoId'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Motor"
        400:
          $ref: '#/components/responses/400InvalidInput'
        500:
          $ref: '#/components/responses/500InternalError'
  /motor/update/{motor_id}:
    patch:
      tags:
      - motor
      summary: Update the settings of a motor
      operationId: motor.update
      parameters:
        - name: motor_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MotorNoId'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Motor"
        400:
          $ref: '#/components/responses/400InvalidInput'
        500:
          $ref: '#/components/responses/500InternalError'
  # MOTOR CALIBRATION
  /motor/calibrate/start/{motor_id}:
    # This request asks the Hub to begin the calibration procedure.
    # The Hub should change the state of the motor to disallow "normal" requests,
    # by changing the motor's state to CALIBRATING
    patch:
      tags:
      - "motor"
      summary: "Initiate motor calibration"
      operationId: "motor.calibration_start"
      parameters:
        - name: motor_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/id"
      responses:
        100: # motor state has been updated to CALIBRATING, awaiting actions
          $ref: "#/components/responses/100Continue"
        409: # motor is not in IDLE state
          $ref: "#/components/responses/409Conflict"
        400:
          $ref: "#/components/responses/400InvalidInput"
        500:
          $ref: "#/components/responses/500InternalError"
  /motor/calibrate/stop/{motor_id}:
    # This request asks the Hub to end the calibration procedure. The Hub should
    # change the state of the motor to only allow "normal" requests again,
    # by changing the motor's state to IDLE
    patch:
      tags:
      - "motor"
      summary: "Stop motor calibration"
      operationId: "motor.calibration_stop"
      parameters:
        - name: motor_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/id"
      responses:
        200: # motor state has been reset to IDLE, ending calibration procedure
          $ref: "#/components/responses/200OK"
        409: # motor is not in CALIBRATING state
          $ref: "#/components/responses/409Conflict"
        400:
          $ref: "#/components/responses/400InvalidInput"
        500:
          $ref: "#/components/responses/500InternalError"
  /motor/calibrate/move_up/{motor_id}:
    # Request is sent when the user begins holding down the "up" button on the
    # calibration page, requesting that the motor begin moving up (slowly).
    patch:
      tags:
      - "motor"
      summary: "Begin rolling up the blind until the user signals the highest point"
      operationId: "motor.calibration_move_up"
      parameters:
        - name: motor_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/id"
      responses:
        100: # motor state set from CALIBRATING to CALIBRATING_MOVING, awaiting /stop_moving/
          $ref: "#/components/responses/100Continue"
        409: # motor is not in CALIBRATING state
          $ref: "#/components/responses/409Conflict"
        400:
          $ref: "#/components/responses/400InvalidInput"
        500:
          $ref: "#/components/responses/500InternalError"
  /motor/calibrate/move_down/{motor_id}:
    # Request is sent when the user begins holding down the "down" button on the
    # calibration page, requesting that the motor begin moving down (slowly).
    patch:
      tags:
      - "motor"
      summary: "Begin rolling down the blind until the user signals the lowest point"
      operationId: "motor.calibration_move_down"
      parameters:
        - name: motor_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/id"
      responses:
        100: # motor state set from CALIBRATING to CALIBRATING_MOVING, awaiting /stop_moving/
          $ref: "#/components/responses/100Continue"
        409: # motor is not in CALIBRATING state
          $ref: "#/components/responses/409Conflict"
        400:
          $ref: "#/components/responses/400InvalidInput"
        500:
          $ref: "#/components/responses/500InternalError"
  /motor/calibrate/stop_moving/{motor_id}:
    # Request is sent when the user releases the "up" or "down" button on the
    # calibration page, requesting that the motor stop moving up.
    patch:
      tags:
      - "motor"
      summary: "Pause rolling the blind for calibration"
      operationId: "motor.calibration_stop_moving"
      parameters:
        - name: motor_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/id"
      responses:
        100: # motor state set from CALIBRATING_MOVING to CALIBRATING, awaiting actions
          $ref: "#/components/responses/100Continue"
        409: # motor is not in CALIBRATING_MOVING state
          $ref: "#/components/responses/409Conflict"
        400:
          $ref: "#/components/responses/400InvalidInput"
        500:
          $ref: "#/components/responses/500InternalError"
  /motor/calibrate/set_highest/{motor_id}:
    # Request is sent when the user wants to update the highest point
    patch:
      tags:
      - "motor"
      summary: "Set the highest point for this motor"
      operationId: "motor.calibration_set_highest"
      parameters:
        - name: motor_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/id"
      responses:
        200:
          $ref: "#/components/responses/200OK"
        409: # motor is not in CALIBRATING state
          $ref: "#/components/responses/409Conflict"
        400:
          $ref: "#/components/responses/400InvalidInput"
        500:
          $ref: "#/components/responses/500InternalError"
  /motor/calibrate/set_lowest/{motor_id}:
    # Request is sent when the user wants to update the lowest point
    patch:
      tags:
      - "motor"
      summary: "Set the lowest point for this motor"
      operationId: "motor.calibration_set_lowest"
      parameters:
        - name: motor_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/id"
      responses:
        200:
          $ref: "#/components/responses/200OK"
        409: # motor is not in CALIBRATING state
          $ref: "#/components/responses/409Conflict"
        400:
          $ref: "#/components/responses/400InvalidInput"
        500:
          $ref: "#/components/responses/500InternalError"
  # Motion Sensor
  /motion/{motion_sensor_id}:
    get:
      tags:
      - motion
      summary: Get motion sensor state
      operationId: motion-sensor.get
      parameters:
        - name: motion_sensor_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/id'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Motion"
        400:
          $ref: '#/components/responses/400InvalidInput'
        500:
          $ref: '#/components/responses/500InternalError'
  /motion/get_all:
    get:
      tags:
      - motion
      summary: Get all motion sensor information
      operationId: motion-sensor.get_all
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Motion'
        '400':
          $ref: '#/components/responses/400InvalidInput'
        '500':
          $ref: '#/components/responses/500InternalError'
  /motion/unregister/{motion_sensor_id}:
    delete:
      tags:
        - "motion"
      summary: "Delete motion sensor"
      operationId: motion-sensor.unregister
      parameters:
        - name: motion_sensor_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/id'
      responses:
        200:
          description: "Ok"
        400:
          $ref: '#/components/responses/400InvalidInput'
        500:
          $ref: '#/components/responses/500InternalError'
  /motion/update/{motion_sensor_id}:
    patch:
      tags:
      - motion
      summary: Update the settings of a motion sensor
      operationId: motion-sensor.update
      parameters:
        - name: motion_sensor_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MotionNoId'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Motion"
        400:
          $ref: '#/components/responses/400InvalidInput'
        500:
          $ref: '#/components/responses/500InternalError'
  /motion/register:
    post:
      tags:
      - "motion"
      summary: "Add a new motion sensor to system"
      operationId: motion-sensor.register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MotionNoId'

      responses:
        201:
          description: Registered new motion sensor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Motion"
        400:
          $ref: '#/components/responses/400InvalidInput'
        500:
          $ref: '#/components/responses/500InternalError'

  # Light sensor
  /light/{light_sensor_id}:
    get:
      tags:
      - "light"
      summary: "Get light sensor state"
      operationId: light-sensor.get
      parameters:
        - name: light_sensor_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/id'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Light"
        400:
          $ref: '#/components/responses/400InvalidInput'
        500:
          $ref: '#/components/responses/500InternalError'
  /light/get_all:
    get:
      tags:
      - light
      summary: Get all light sensor information
      operationId: light-sensor.get_all
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Light'
        '400':
          $ref: '#/components/responses/400InvalidInput'
        '500':
          $ref: '#/components/responses/500InternalError'
  /light/unregister/{light_sensor_id}:
    delete:
      tags:
        - "light"
      summary: "Delete light sensor"
      operationId: light-sensor.unregister
      parameters:
        - name: light_sensor_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/id'
      responses:
        200:
          description: "Ok"
        400:
          $ref: '#/components/responses/400InvalidInput'
        500:
          $ref: '#/components/responses/500InternalError'
  /light/update/{light_sensor_id}:
    patch:
      tags:
      - light
      summary: Update the settings of a light sensor
      operationId: light-sensor.update
      parameters:
        - name: light_sensor_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LightNoId'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Light"
        400:
          $ref: '#/components/responses/400InvalidInput'
        500:
          $ref: '#/components/responses/500InternalError'
  /light/register:
    post:
      tags:
      - "light"
      summary: "Add a new light sensor to system"
      operationId: light-sensor.register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LightNoId'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Light"
        400:
          $ref: '#/components/responses/400InvalidInput'
        500:
          $ref: '#/components/responses/500InternalError'

  #Schedule
  /schedule/get_all:
    get:
      tags:
      - schedule
      summary: Get all schedule information
      operationId: schedule.get_all
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schedule'
        '400':
          $ref: '#/components/responses/400InvalidInput'
        '500':
          $ref: '#/components/responses/500InternalError'
  /schedule/register:
    post:
      tags:
      - "schedule"
      summary: "Add a new schedule"
      operationId: schedule.register
      requestBody:
        content:
          application/json:
            schema:
                $ref: "#/components/schemas/ScheduleNoId"
      responses:
        200:
          description: "Ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Schedule"
        400:
          $ref: '#/components/responses/400InvalidInput'
        500:
          $ref: '#/components/responses/500InternalError'
  /schedule/unregister/{schedule_id}:
    delete:
      tags:
        - "schedule"
      summary: "Delete schedule"
      operationId: schedule.unregister
      parameters:
        - name: schedule_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/id'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Schedule"
        400:
          $ref: '#/components/responses/400InvalidInput'
        500:
          $ref: '#/components/responses/500InternalError'
  /schedule/update/{schedule_id}:
    patch:
      tags:
      - schedule
      summary: Update the settings of a schedule
      operationId: schedule.update
      parameters:
        - name: schedule_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleNoId'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Schedule"
        400:
          $ref: '#/components/responses/400InvalidInput'
        500:
          $ref: '#/components/responses/500InternalError'


components:
  schemas:
    Motor:
      type: object
      required:
        - id
        - name
        - ip
        - active
        - level
        - battery
        - length
        - style
      properties:
        id:
          $ref: '#/components/schemas/id'
        name:
          type: string
          example: bedroom-1
        ip:
          $ref: '#/components/schemas/ip'
        active:
          type: boolean
        level:
          $ref: '#/components/schemas/level'
        battery:
          type: integer
          minimum: 0
          maximum: 100
        length:
          type: integer
        style:
          # For storing customised style info like icon or colour.
          # Hub just needs to store it, app will figure out formatting and stuff.
          type: string
    MotorNoId:
      type: object
      required:
        - name
        - ip
        - active
        - level
        - battery
        - length
        - style
      properties:
        name:
          type: string
          example: bedroom-1
        ip:
          $ref: '#/components/schemas/ip'
        active:
          type: boolean
        level:
          $ref: '#/components/schemas/level'
        battery:
          type: integer
          minimum: 0
          maximum: 100
        length:
          type: integer
        style:
          # For storing customised style info like icon or colour.
          # Hub just needs to store it, app will figure out formatting and stuff.
          type: string
    Motion:
      type: "object"
      required:
        - id
        - name
        - ip
        - active
        - battery
        - duration_sensitivity
        - motor_ids
        - style
      properties:
        id:
          $ref: '#/components/schemas/id'
        name:
          type: "string"
          example: "hallway"
        ip:
          $ref: '#/components/schemas/ip'
        active:
          type: "boolean"
        battery:
          type: "integer"
          minimum: 0
          maximum: 100
        duration_sensitivity:
          type: "string" # pattern hh:mm
        motor_ids:
          type: array
          items:
            type: integer
        style:
          # For storing customised style info like icon or colour.
          # Hub just needs to store it, app will figure out formatting and stuff.
          type: string
    Light:
      type: "object"
      required:
        - id
        - name
        - ip
        - active
        - battery
        - motor_ids
        - style
      properties:
        id:
          $ref: '#/components/schemas/id'
        name:
          type: "string"
          example: "hallway"
        ip:
          $ref: '#/components/schemas/ip'
        active:
          type: "boolean"
        battery:
          type: "integer"
          minimum: 0
          maximum: 100
        motor_ids:
          type: array
          items:
            type: integer
        style:
          # For storing customised style info like icon or colour.
          # Hub just needs to store it, app will figure out formatting and stuff.
          type: string
    Schedule:
      type: "object"
      required:
        - id
        - name
        - active
        - days
        - target_level
        - gradient
        - motor_ids
        - time
      properties:
        id:
          $ref: '#/components/schemas/id'
        name:
          type: "string"
          example: "weekday mornings"
        active:
          type: "boolean"
        days:
          $ref: "#/components/schemas/days"
        target_level:
          $ref: '#/components/schemas/level'
        gradient:
          $ref: '#/components/schemas/gradient'
        motor_ids:
          type: array
          items:
            type: integer
        time:
          $ref: "#/components/schemas/time"
    id:
      type: "integer"
      minimum: 0
    ip:
      type: string
      format: ipv4
    level:
      type: integer
      minimum: 0
      maximum: 100
    time:
      type: string # pattern hh:mm
    gradient:
      type: integer # number of minutes before that it starts moving
      minimum: 0
    days:
      type: "array"
      items:
        type: string
        enum:
          - Monday
          - Tuesday
          - Wednesday
          - Thursday
          - Friday
          - Saturday
          - Sunday
    MotionNoId:
      type: "object"
      required:
        - name
        - ip
        - active
        - battery
        - duration_sensitivity
        - motor_ids
        - style
      properties:
        name:
          type: "string"
          example: "hallway"
        ip:
          $ref: '#/components/schemas/ip'
        active:
          type: "boolean"
        battery:
          type: "integer"
          minimum: 0
          maximum: 100
        duration_sensitivity:
          type: "string" # pattern hh:mm
        motor_ids:
          type: array
          items:
            type: integer
        style:
          # For storing customised style info like icon or colour.
          # Hub just needs to store it, app will figure out formatting and stuff.
          type: string
    LightNoId:
      type: "object"
      required:
        - name
        - ip
        - active
        - battery
        - motor_ids
        - style
      properties:
        name:
          type: "string"
          example: "hallway"
        ip:
          $ref: '#/components/schemas/ip'
        active:
          type: "boolean"
        battery:
          type: "integer"
          minimum: 0
          maximum: 100
        motor_ids:
          type: array
          items:
            type: integer
        style:
          # For storing customised style info like icon or colour.
          # Hub just needs to store it, app will figure out formatting and stuff.
          type: string
    ScheduleNoId:
      type: "object"
      required:
        - name
        - active
        - days
        - target_level
        - gradient
        - motor_ids
        - time
      properties:
        name:
          type: "string"
          example: "weekday mornings"
        active:
          type: "boolean"
        days:
          $ref: "#/components/schemas/days"
        target_level:
          $ref: '#/components/schemas/level'
        gradient:
          $ref: '#/components/schemas/gradient'
        motor_ids:
          type: array
          items:
            type: integer
        time:
          $ref: "#/components/schemas/time"
  responses:
    100Continue:
      description: Request received, awaiting client action
    200OK:
      description: Operation completed successfully
    201CreatedObject:
      description: Created object successfully
    400InvalidInput:
      description: Invalid input, ensure object id was specified correctly
    409Conflict:
      description: Object's current state does not allow this operation
    500InternalError:
      description: Internal server error, failed to complete operation

externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
